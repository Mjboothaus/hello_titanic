# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/88_app.ipynb (unless otherwise specified).

__all__ = ['TITANIC_DATA_FILE', 'AUTHOR_INFO', 'APP_NAME', 'SideBar', 'create_sidebar', 'app_mainscreen',
           'notebook_mainscreen', 'sb', 'df']

# Cell
import numpy as np
import pandas as pd
import datetime as dt
import streamlit as st
from streamlit_folium import folium_static
import folium

import hello_titanic.core as core
import hello_titanic.datapipe as datapipe
import hello_titanic.geo as geo

from pandas_profiling import ProfileReport
from streamlit_pandas_profiling import st_profile_report
from geopy.geocoders import Nominatim

# Cell
TITANIC_DATA_FILE = 'http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.csv'
AUTHOR_INFO = 'AUTHOR: [Michael J. Booth](https://about.me/mjboothaus)'
APP_NAME = 'Titanic Data Explorer - PP'

# Cell
class SideBar:
    datasource = 'DATA: [Titanic Dataset (known errors)](http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3info.txt)'
    datasize = 0   # look to calculate this (in MB?)
    author = AUTHOR_INFO
    title = 'Data details...'
    data_local = False
    start_date = dt.date.today()
    end_date = dt.date.today()
    selected_data = None
    calc_corr = False


def create_sidebar():
    sb = SideBar()
    st.sidebar.markdown(sb.author)
    st.sidebar.markdown(sb.datasource)
    st.sidebar.info(sb.title)
    st.sidebar.markdown('Datasize: ' + str(sb.datasize))
    sb.calc_corr = st.sidebar.checkbox('Calculate correlations?', value=False)
    return sb


def app_mainscreen(df, pr, APP_NAME):
    st.title(APP_NAME)

    # Folium mapping example: center on Sydney Opera House
    m = folium.Map(location=[-33.85719805, 151.21512338473752], zoom_start=15)

    # add marker for Opera House
    tooltip = "Sydney Opera House"
    folium.Marker(
        [-33.85719805, 151.21512338473752], popup="Sydney Opera House", tooltip=tooltip
    ).add_to(m)

    # call to render Folium map in Streamlit
    folium_static(m)

    # Dataframe / Profiling example
    df['home.dest'].fillna(value='', inplace=True)
    #df['lat_lon'] = df['home.dest'].apply(lambda dest: geo.lookup_lat_lon_from_placename(dest))
    #TODO: Pre-process data & cache
    st.write(df)
    st.header('Data Profile:')
    st_profile_report(pr)

    return df

# Cell
def notebook_mainscreen(df, pr, APP_NAME):
    print(APP_NAME)

    # Folium mapping example: center on Sydney Opera House
    m = folium.Map(location=[-33.85719805, 151.21512338473752], zoom_start=15)

    # add marker for Opera House
    tooltip = "Sydney Opera House"
    folium.Marker(
        [-33.85719805, 151.21512338473752], popup="Sydney Opera House", tooltip=tooltip
    ).add_to(m)

    # call to render Folium map
    m

    # Dataframe / Profiling example
    df['home.dest'].fillna(value='', inplace=True)
    #df['lat_lon'] = df['home.dest'].apply(lambda dest: geo.lookup_lat_lon_from_placename(dest))
    #TODO: Pre-process data & cache

    print(df.head(5))
    print('Data Profile:')
    pr

# Cell
sb = create_sidebar()

df = datapipe.load_and_cache_raw_data()

if sb.calc_corr:
    pr = ProfileReport(df, explorative=True)
else:
    pr = ProfileReport(df, explorative=True, correlations=None)


if core.in_notebook():
    notebook_mainscreen(df, pr, APP_NAME)
else:
    df = app_mainscreen(df, pr, APP_NAME)